---
title: "Final Project"
author: "Mathias Heinz"
date: "2024-04-8"
categories: [code, analysis]

---
```{r}
library(tidyverse)
library(plotly)

wine_ratings <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-28/winemag-data-130k-v2.csv")


```

```{r}


wine_clean <- wine_ratings |> filter(variety == "Cabernet Sauvignon" 
                                     | variety == "Pinot Noir" | variety == "Merlot" 
                                     | variety == "Chardonay" | variety == "Sauvignon Blanc"
                                     | variety == "Pinot Gris" |  variety == "Reisling"                           | variety == "Red Blend"
                                     | variety == "White Blend" | variety == "Malbec"
                                     | variety == "Rosé" | variety == "Moscato"
                                     | variety == "Prosecco" | variety == "Tempranillo"
                                     | variety == "Syrah" | variety == "Shiraz"
                                     | variety == "Zinfandel") |> 
  mutate(r_w = case_when(variety == "Chardonay" 
                          | variety == "Sauvignon Blanc" 
                          | variety == "Pinot Gris" 
                          | variety == "Reisling" 
                          | variety == "White Blend"
                          | variety == "Moscato"
                          | variety == "Rosé"
                          | variety == "Prosecco" ~ "White",
         variety == "Cabernet Savuginon" | variety == "Pinot Noir"
         | variety == "Merlot" | variety == "Red Blend" | 
           variety == "Malbec" | variety == "Tempranillo" |
           variety == "Syrah" | variety == "Shiraz" |
           variety == "Zinfandel" ~ "Red"))
grape_sel <- wine_clean |> distinct(variety) |> pull(variety)
country_sel <- wine_clean |> distinct(country) |> pull(country)
wine_ratings |> distinct(variety) |> pull(variety)
wine_ratings |> filter(variety == "Zinfandel")
wine_clean |> filter(!is.na(price)) |> summarise(min(price))
wine_clean |> filter(!is.na(price)) |> summarise(max(price))
## Of the 707 varieties in the data set I have collected 17 of the most popular grape varieties, leaving me with almost 60,000 observations.

oregon_pn <- wine_clean |> filter(country == "US") |> 
  filter(variety == "Pinot Noir") |> 
  filter(price >= 20 & price <= 50) |> 
  filter(province == "Oregon")

ggplot(oregon_pn, aes(x = price, y = points))+
  geom_hex()
```



```{r}
library(shiny)

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      selectInput("country_sel", label = "Choose a Country", 
                  choices = country_sel),
      radioButtons("white_or_red", label = "Red or White",
                  choices = c("Red", "White")),
      selectInput("grape_sel", label = "Choose a Grape",
                 choices = grape_sel),
      sliderInput("price_range", label = "Choose a Minimum Price",
                  min = 4, max = 2500, value = c(4,2500), step = 1)
    ),
    mainPanel(
      plotOutput("wine_plot"),
      tableOutput("wine_table")
    )
  )
)

server <- function(input, output, session) {
  wine_plot <- reactive({
    wine_one <- wine_clean |> filter(country == input$country_sel) |> 
  filter(variety == input$grape_sel) |> 
  filter(price >= input$price_range) 
  })
  output$wine_table <- renderTable({
    wine_plot()
  })
  output$wine_plot <- renderPlot({
    ggplot(wine_plot(), aes(x = price, y = points))+
  geom_hex()+
  scale_color_viridis_c()+
  labs(title = glue::glue("Graph of Price vs Score for ", input$country_sel,
                          input$grape_sel))
  })
}

shinyApp(ui, server)
```

```{r}
ggplot(wine_clean, aes(x = price, y = points))+
  geom_hex()+
  scale_color_viridis_c()
  
```

Testing section to not break code

```{r}
ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      selectInput("country_sel", label = "Choose a Country", 
                  choices = country_sel),
      radioButtons("white_or_red", label = "Red or White",
                  choices = c("Red", "White")),
      selectInput("grape_sel", label = "Choose a Grape",
                 choices = grape_sel),
      sliderInput("price_range", label = "Choose a Minimum Price",
                  min = 4, max = 2500, value = c(4,2500), step = 1)
    ),
    mainPanel(
      plotOutput("wine_plot"),
      plotlyOutput(outputId = "wine_point"),
      tableOutput("wine_table")
      
    )
  )
)

server <- function(input, output, session) {
 observeEvent(input$white_or_red, {
   grape_sel <- wine_clean |> filter(r_w == input$white_or_red) |> distinct(variety) |> pull(variety)
   
   updateSelectInput(inputId = "grape_sel",
                     choices = grape_sel)
 })
  observeEvent(input$country_sel,{
    grape_sel <- wine_clean |> filter(r_w == input$white_or_red) |> filter(country == input$country_sel) |> distinct(variety) |> pull(variety)
    updateSelectInput(inputId = "grape_sel",
                      choices = grape_sel)
  })
   wine_df <- reactive({
    wine_one <- wine_clean |> filter(country == input$country_sel) |> 
  filter(variety == input$grape_sel) |> 
  filter(price >= input$price_range) |> filter(
  price >= input$price_range[1] & price <= input$price_range[2])
  })
   
  output$wine_table <- renderTable({
    wine_plot()
  })
  output$wine_plot <- renderPlot({
    ggplot(wine_df(), aes(x = price, y = points))+
  geom_hex()+
  scale_color_viridis_c()+
  labs(title = glue::glue("Graph of Price vs Score for ", input$country_sel,
                          input$grape_sel))
  })
  output$wine_point <- renderPlotly({
    ggplot(data = wine_df(), aes(x = price, y = points, label = title))+
      geom_point()+
      theme_minimal()+
      labs(title = glue::glue("Graph of Price vs Score for ", input$country_sel,
                          input$grape_sel))
    ggplotly(wine_point, tooltip = "label")
  })
}

shinyApp(ui, server)
```

```{r}
library(plotly)
oregon_plot <- ggplot(data = oregon_pn, aes(x = price, y = points, label = title))+
  geom_point()+
  theme_minimal()

ggplotly(oregon_plot, tooltip = "label")

```

```{r}
library(shiny)

ui <- navbarPage("Wine of The World",
                 tabPanel("Hex Plot",
                          sidebarLayout(
                            sidebarPanel(
                            selectInput("country_sel", label = "Choose a Country", 
                  choices = country_sel),
      radioButtons("white_or_red", label = "Red or White",
                  choices = c("Red", "White")),
      selectInput("grape_sel", label = "Choose a Grape",
                 choices = grape_sel),
      sliderInput("price_range", label = "Choose a Minimum Price",
                  min = 4, max = 2500, value = c(4,2500), step = 1)  
                            ),
      mainPanel(
        plotOutput("wine_plot")
      )
                          ))
  
)

server <- function(input, output, session) {
   observeEvent(input$white_or_red, {
   grape_sel <- wine_clean |> filter(r_w == input$white_or_red) |> distinct(variety) |> pull(variety)
   
   updateSelectInput(inputId = "grape_sel",
                     choices = grape_sel)
 })
  observeEvent(input$country_sel,{
    grape_sel <- wine_clean |> filter(r_w == input$white_or_red) |> filter(country == input$country_sel) |> distinct(variety) |> pull(variety)
    updateSelectInput(inputId = "grape_sel",
                      choices = grape_sel)
  })
   wine_df <- reactive({
    wine_one <- wine_clean |> filter(country == input$country_sel) |> 
  filter(variety == input$grape_sel) |> 
  filter(price >= input$price_range) |> filter(
  price >= input$price_range[1] & price <= input$price_range[2])
  })
   
  output$wine_table <- renderTable({
    wine_plot()
  })
  output$wine_plot <- renderPlot({
    ggplot(wine_df(), aes(x = price, y = points))+
  geom_hex()+
  scale_color_viridis_c()+
  labs(title = glue::glue("Graph of Price vs Score for ", input$country_sel,
                          input$grape_sel))
  })
  output$wine_point <- renderPlotly({
    ggplot(data = wine_df(), aes(x = price, y = points, label = title))+
      geom_point()+
      theme_minimal()+
      labs(title = glue::glue("Graph of Price vs Score for ", input$country_sel,
                          input$grape_sel))
    ggplotly(wine_point, tooltip = "label")
  })
}

shinyApp(ui, server)
```

